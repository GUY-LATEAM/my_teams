# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the workflow will run
on: [push, pull_request]

env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-NWP-400-TLS-4-1-myteams-clement.lagasse.git
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: check good files & folders
        run : |
          paths=($(find . -name '#*#' -o -name '*-' -o -name '*.tmp' -o -name '*.o' -o -name '*.a' -o -name '*.so' -o -name '*.gcno' -o -name '*.gcda' -o -name '*.gcov' -o -type d -name 'tmp'))
          if [[ ! -z "$path" ]]; then
            IFS=$'\n'
            unset IFS
            for FILE in "${paths[@]}"; do echo "::error title=Unwanted file detected,file=$FILE::$FILE"; done
            exit 1
          fi

  check_program_compilation:
    needs: check_repository_cleanliness
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v2
      
      - name: make for makefile
        run: timeout 2m make

  check_norm:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: test norm
        run: |
          wget https://raw.githubusercontent.com/Epitech/coding-style-checker/main/coding-style.sh && echo "no" | bash coding-style.sh . .
          if [[ ! -z "$(grep -E "MAJOR|MINOR" coding-style-reports.log)" ]]; then
              IFS=$'\n'
              paths=($(cat coding-style-reports.log))
              unset IFS
              for FILE in "${paths[@]}"; do echo "::error title=Norm error,file=$FILE::$FILE"; done
              exit 1
          fi

  push_to_mirror:
    needs: check_norm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
